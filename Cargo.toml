[package]
name = "bevy_template"
version = "0.1.0"
edition = "2021"

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Enable more optimization in the release profile at the cost of compile time.
[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"

[features]
default = [ "dev" ]
dev = [
    "bevy/dynamic_linking",
    "dep:bevy-inspector-egui",
]

[dependencies]
bevy = { version = "0.15", default-features = false, features = [
    # "bevy_mesh_picking_backend",            # Provides an implementation for picking meshes
    "bevy_sprite_picking_backend",          # Provides an implementation for picking sprites
    "bevy_ui_picking_backend",              # Provides an implementation for picking UI
    # "dynamic_linking",                      # Force dynamic linking, which improves iterative compile times
    "sysinfo_plugin",                       # Enables system information diagnostic plugin
    "bevy_animation",                       # Provides animation functionality
    "bevy_asset",                           # Provides asset functionality
    "bevy_audio",                           # Provides audio functionality
    "bevy_color",                           # Provides shared color types and operations
    "bevy_core_pipeline",                   # Provides cameras and other basic render pipeline features
    "bevy_gilrs",                           # Adds gamepad support
    # "bevy_gltf",                            # [glTF](https://www.khronos.org/gltf/) support
    "bevy_pbr",                             # Adds PBR rendering
    "bevy_picking",                         # Provides picking functionality
    "bevy_render",                          # Provides rendering functionality
    "bevy_scene",                           # Provides scene functionality
    "bevy_sprite",                          # Provides sprite functionality
    "bevy_text",                            # Provides text functionality
    "bevy_ui",                              # A custom ECS-driven UI framework
    "bevy_window",                          # Windowing layer
    "bevy_winit",                           # winit window and input backend
    # "bevy_image",                           # Load and access image data. Usually added by an image format
    "bevy_gizmos",                          # Adds support for rendering gizmos
    # "bevy_dev_tools",                       # Provides a collection of developer tools
    # "bevy_remote",                          # Enable the Bevy Remote Protocol
    # "spirv_shader_passthrough",             # Enable passthrough loading for SPIR-V shaders (Only supported on Vulkan, shader capabilities and extensions must agree with the platform implementation)
    # "trace_chrome",                         # Tracing support, saving a file in Chrome Tracing format
    # "trace_tracy",                          # Tracing support, exposing a port for Tracy
    # "trace_tracy_memory",                   # Tracing support, with memory profiling, exposing a port for Tracy
    # "trace",                                # Tracing support
    # "basis-universal",                      # Basis Universal compressed texture support
    # "bmp",                                  # BMP image format support
    # "dds",                                  # DDS compressed texture support
    # "exr",                                  # EXR image format support
    # "ff",                                   # Farbfeld image format support
    # "gif",                                  # GIF image format support
    "hdr",                                  # HDR image format support
    # "ktx2",                                 # KTX2 compressed texture support
    # "ico",                                  # ICO image format support
    # "jpeg",                                 # JPEG image format support
    "png",                                  # PNG image format support
    # "pnm",                                  # PNM image format support, includes pam, pbm, pgm and ppm
    # "qoi",                                  # QOI image format support
    # "tga",                                  # TGA image format support
    # "tiff",                                 # TIFF image format support
    # "webp",                                 # WebP image format support
    # "zlib",                                 # For KTX2 supercompression
    # "zstd",                                 # For KTX2 supercompression
    # "flac",                                 # FLAC audio format support
    # "mp3",                                  # MP3 audio format support
    # "vorbis",                               # OGG/VORBIS audio format support
    # "wav",                                  # WAV audio format support
    # "minimp3",                              # MP3 audio format support (through minimp3)
    # "symphonia-aac",                        # AAC audio format support (through symphonia)
    # "symphonia-all",                        # AAC, FLAC, MP3, MP4, OGG/VORBIS, and WAV audio formats support (through symphonia)
    # "symphonia-flac",                       # FLAC audio format support (through symphonia)
    # "symphonia-isomp4",                     # MP4 audio format support (through symphonia)
    # "symphonia-vorbis",                     # OGG/VORBIS audio format support (through symphonia)
    # "symphonia-wav",                        # WAV audio format support (through symphonia)
    # "serialize",                            # Enable serialization support through serde
    "multi_threaded",                       # Enables multithreaded parallelism in the engine. Disabling it forces all engine tasks to run on a single thread.
    # "async-io",                             # Use async-io's implementation of block_on instead of futures-lite's implementation. This is preferred if your application uses async-io.
    # "wayland",                              # Wayland display server support
    "x11",                                  # X11 display server support
    # "android-native-activity",              # Android NativeActivity support. Legacy, should be avoided for most new Android games.
    # "android-game-activity",                # Android GameActivity support. Default, choose between this and `android-native-activity`.
    # "bevy_ci_testing",                      # Enable systems that allow for automated testing on CI
    # "animation",                            # Enable animation support, and glTF animation loading
    # "android_shared_stdcxx",                # Enable using a shared stdlib for cxx on Android
    # "detailed_trace",                       # Enable detailed trace event logging. These trace events are expensive even when off, thus they require compile time opt-in
    "tonemapping_luts",                     # Include tonemapping Look Up Tables KTX2 files. If everything is pink, you need to enable this feature or change the `Tonemapping` method for your `Camera2d` or `Camera3d`.
    "smaa_luts",                            # Include SMAA Look Up Tables KTX2 Files
    # "accesskit_unix",                       # Enable AccessKit on Unix backends (currently only works with experimental screen readers and forks.)
    # "glam_assert",                          # Enable assertions to check the validity of parameters passed to glam
    # "debug_glam_assert",                    # Enable assertions in debug builds to check the validity of parameters passed to glam
    "default_font",                         # Include a default font, containing only ASCII characters, at the cost of a 20kB binary size increase
    # "shader_format_glsl",                   # Enable support for shaders in GLSL
    # "shader_format_spirv",                  # Enable support for shaders in SPIR-V
    # "pbr_transmission_textures",            # Enable support for transmission-related textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs
    # "pbr_multi_layer_material_textures",    # Enable support for multi-layer material textures in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs
    # "pbr_anisotropy_texture",               # Enable support for anisotropy texture in the `StandardMaterial`, at the risk of blowing past the global, per-shader texture limit on older/lower-end GPUs
    # "experimental_pbr_pcss",                # Enable support for PCSS, at the risk of blowing past the global, per-shader sampler limit on older/lower-end GPUs
    # "webgl2",                               # Enable some limitations to be able to use WebGL2. Please refer to the [WebGL2 and WebGPU](https://github.com/bevyengine/bevy/tree/latest/examples#webgl2-and-webgpu) section of the examples README for more information on how to run Wasm builds with WebGPU.
    # "webgpu",                               # Enable support for WebGPU in Wasm. When enabled, this feature will override the `webgl2` feature and you won't be able to run Wasm builds with WebGL2, only with WebGPU.
    # "asset_processor",                      # Enables the built-in asset processor for processed assets.
    # "file_watcher",                         # Enables watching the filesystem for Bevy Asset hot-reloading
    # "embedded_watcher",                     # Enables watching in memory asset providers for Bevy Asset hot-reloading
    # "bevy_debug_stepping",                  # Enable stepping-based debugging of Bevy systems
    # "meshlet",                              # Enables the meshlet renderer for dense high-poly scenes (experimental)
    # "meshlet_processor",                    # Enables processing meshes into meshlet meshes for bevy_pbr
    # "ios_simulator",                        # Enable support for the ios_simulator by downgrading some rendering capabilities
    "bevy_state",                           # Enable built in global state machines
    # "track_change_detection",               # Enables source location tracking for change detection, which can assist with debugging
    # "reflect_functions",                    # Enable function reflection
    "custom_cursor",                        # Enable winit custom cursor support
    # "ghost_nodes",                          # Experimental support for nodes that are ignored for UI layouting
] }

# Flexible concrete Error type built on std::error::Error
anyhow = "1"
# This Bevy plugin reduces boilerplate for handling game assets.
bevy_asset_loader = { version = "0.22" }
# Inspector plugin for the bevy game engine
bevy-inspector-egui = { version = "0.29", optional = true }
# A macro to generate structures which behave like bitflags.
bitflags = "2.8"
# A tiny mid-level library that provides platform-specific standard locations of directories
directories = "6"
# Random number generators and other randomness functionality.
rand = "0.9"
# Selected PCG random number generators
rand_pcg = { version = "0.9", features = ["serde"] }
# An implementation of regular expressions for Rust.
regex = "1"
# Rusty Object Notation
ron = { version = "0.8", features = ["integer128"] }
# A generic serialization/deserialization framework
serde = { version = "1", features = ["derive", "rc", "alloc"] }
# This library provides a convenient derive macro for the standard library's std::error::Error trait.
thiserror = "2"
# A native Rust encoder and decoder of TOML-formatted files and streams
toml = "0.8"

## This greatly improves WGPU's performance due to its heavy use of trace! calls
log = { version = "*", features = ["max_level_debug", "release_max_level_warn"] }
# keep the following in sync with Bevy's dependencies
winit = { version = "0.30", default-features = false }
image = { version = "0.25.2", default-features = false }